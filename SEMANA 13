import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class DataManagerGUI extends JFrame {

    private final JTextField inputField;
    private final JButton addButton;
    private final JButton clearButton;
    private final JButton clearListButton;
    private final JTable table;
    private final DefaultTableModel model;
    private final JLabel statusLabel;

    public DataManagerGUI() {
        super("Gestor Visual de Datos — Swing Demo");

        // ====== Modelo de datos (no editable) ======
        model = new DefaultTableModel(new Object[]{"Dato"}, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // La tabla solo muestra, no edita en celda
            }
        };

        // ====== Componentes ======
        inputField = new JTextField(24);
        addButton = new JButton("Agregar");
        clearButton = new JButton("Limpiar");
        clearListButton = new JButton("Borrar listado");

        table = new JTable(model);
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        JScrollPane scrollPane = new JScrollPane(table);

        statusLabel = new JLabel("0 elementos");
        statusLabel.setBorder(BorderFactory.createEmptyBorder(0, 8, 0, 8));

        // ====== Layout principal ======
        setLayout(new BorderLayout(10, 10));
        JPanel topPanel = buildTopPanel();
        JPanel bottomPanel = buildBottomPanel();

        add(topPanel, BorderLayout.NORTH);
        add(scrollPane, BorderLayout.CENTER);
        add(bottomPanel, BorderLayout.SOUTH);

        // ====== Listeners (eventos) ======
        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addItem();
            }
        });

        // Enter en el campo = Agregar
        inputField.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addItem();
            }
        });

        // Limpiar: borra campo y selección de tabla
        clearButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                inputField.setText("");
                table.clearSelection();
                inputField.requestFocusInWindow();
                updateStatus();
            }
        });

        // Borrar todo el listado (opcional según tu diseño)
        clearListButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                model.setRowCount(0);
                updateStatus();
                inputField.requestFocusInWindow();
            }
        });

        // Listener de selección (opcional)
        table.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                updateStatus();
            }
        });

        // ====== Ventana ======
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setMinimumSize(new Dimension(640, 420));
        setLocationRelativeTo(null); // Centrar en pantalla
    }

    private JPanel buildTopPanel() {
        JPanel top = new JPanel(new BorderLayout(6, 6));

        JPanel left = new JPanel(new FlowLayout(FlowLayout.LEFT, 6, 8));
        left.add(new JLabel("Nuevo dato:"));
        left.add(inputField);

        JPanel right = new JPanel(new FlowLayout(FlowLayout.RIGHT, 6, 8));
        right.add(addButton);

        top.add(left, BorderLayout.CENTER);
        top.add(right, BorderLayout.EAST);
        top.setBorder(BorderFactory.createEmptyBorder(10, 10, 0, 10));
        return top;
    }

    private JPanel buildBottomPanel() {
        JPanel bottom = new JPanel(new BorderLayout());

        JPanel buttons = new JPanel(new FlowLayout(FlowLayout.LEFT, 6, 8));
        buttons.add(clearButton);
        buttons.add(clearListButton);

        bottom.add(buttons, BorderLayout.WEST);
        bottom.add(statusLabel, BorderLayout.EAST);
        bottom.setBorder(BorderFactory.createEmptyBorder(0, 10, 10, 10));
        return bottom;
    }

    private void addItem() {
        String text = inputField.getText().trim();

        // Validación: no permitir cadenas vacías
        if (text.isEmpty()) {
            JOptionPane.showMessageDialog(
                    this,
                    "Ingresa un texto no vacío.",
                    "Validación",
                    JOptionPane.WARNING_MESSAGE
            );
            inputField.requestFocusInWindow();
            return;
        }

        // Agregar a la tabla
        model.addRow(new Object[]{text});
        inputField.setText("");
        inputField.requestFocusInWindow();
        updateStatus();
    }

    private void updateStatus() {
        int total = model.getRowCount();
        int selected = table.getSelectedRowCount();
        if (selected > 0) {
            statusLabel.setText(total + " elementos — " + selected + " seleccionado(s)");
        } else {
            statusLabel.setText(total + " elementos");
        }
    }

    public static void main(String[] args) {
        // Look & Feel Nimbus (si está disponible)
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ignored) { /* Si falla, usa el por defecto */ }

        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new DataManagerGUI().setVisible(true);
            }
        });
    }
}
